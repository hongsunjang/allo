#set = affine_set<(d0, d1) : (d0 - d1 - 1 >= 0)>
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @test_cor(%arg0: memref<260x240xf32>, %arg1: memref<240xf32>, %arg2: memref<240xf32>, %arg3: memref<240x240xf32>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 2.600000e+02 : f32
    %cst_0 = arith.constant 16.124515496597098 : f64
    %cst_1 = arith.constant 1.000000e+00 : f32
    %cst_2 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<f32>
    %0 = llvm.mlir.undef : f32
    affine.store %0, %alloca[] : memref<f32>
    %alloca_3 = memref.alloca() : memref<f32>
    affine.store %0, %alloca_3[] : memref<f32>
    affine.for %arg4 = 0 to 240 {
      affine.store %cst_2, %alloca_3[] : memref<f32>
      affine.for %arg5 = 0 to 260 {
        %4 = affine.load %arg0[%arg5, %arg4] : memref<260x240xf32>
        %5 = affine.load %alloca_3[] : memref<f32>
        %6 = arith.addf %5, %4 : f32
        affine.store %6, %alloca_3[] : memref<f32>
      }
      %2 = affine.load %alloca_3[] : memref<f32>
      %3 = arith.divf %2, %cst : f32
      affine.store %3, %arg1[%arg4] : memref<240xf32>
    }
    affine.for %arg4 = 0 to 240 {
      affine.store %cst_2, %alloca[] : memref<f32>
      %2 = affine.load %arg1[%arg4] : memref<240xf32>
      affine.for %arg5 = 0 to 260 {
        %8 = affine.load %arg0[%arg5, %arg4] : memref<260x240xf32>
        %9 = arith.subf %8, %2 : f32
        %10 = arith.mulf %9, %9 : f32
        %11 = affine.load %alloca[] : memref<f32>
        %12 = arith.addf %11, %10 : f32
        affine.store %12, %alloca[] : memref<f32>
      }
      %3 = affine.load %alloca[] : memref<f32>
      %4 = arith.divf %3, %cst : f32
      // %5 = arith.extf %4 : f32 to f64
      %6 = math.sqrt %4 : f32
      // %7 = arith.truncf %6 : f64 to f32
      affine.store %6, %arg2[%arg4] : memref<240xf32>
    }
    %1 = arith.truncf %cst_0 : f64 to f32
    affine.for %arg4 = 0 to 260 {
      affine.for %arg5 = 0 to 240 {
        %2 = affine.load %arg1[%arg5] : memref<240xf32>
        %3 = affine.load %arg0[%arg4, %arg5] : memref<260x240xf32>
        %4 = arith.subf %3, %2 : f32
        affine.store %4, %arg0[%arg4, %arg5] : memref<260x240xf32>
        %5 = affine.load %arg2[%arg5] : memref<240xf32>
        %6 = arith.mulf %1, %5 : f32
        %7 = arith.divf %4, %6 : f32
        affine.store %7, %arg0[%arg4, %arg5] : memref<260x240xf32>
      }
    }
    affine.for %arg4 = 0 to 239 {
      affine.for %arg5 = 0 to 240 {
        affine.if #set(%arg5, %arg4) {
          affine.store %cst_2, %arg3[%arg4, %arg5] : memref<240x240xf32>
          affine.for %arg6 = 0 to 260 {
            %3 = affine.load %arg0[%arg6, %arg4] : memref<260x240xf32>
            %4 = affine.load %arg0[%arg6, %arg5] : memref<260x240xf32>
            %5 = arith.mulf %3, %4 : f32
            %6 = affine.load %arg3[%arg4, %arg5] : memref<240x240xf32>
            %7 = arith.addf %6, %5 : f32
            affine.store %7, %arg3[%arg4, %arg5] : memref<240x240xf32>
          }
          %2 = affine.load %arg3[%arg4, %arg5] : memref<240x240xf32>
          affine.store %2, %arg3[%arg5, %arg4] : memref<240x240xf32>
        }
      }
    }
    affine.store %cst_1, %arg3[239, 239] : memref<240x240xf32>
    return
  }
}
